<?xml version="1.0"?>
<members>
    <member name="T:VRC.SDKBase.Networking">
        <docURL>https://creators.vrchat.com/worlds/udon/networking/</docURL>
        <summary>
            Networking is a class that provides a set of static methods relating to the networking
            of UdonBehaviours.
        </summary>
    </member>
    <member name="P:VRC.SDKBase.Networking.IsNetworkSettled">
        <docURL>
            https://creators.vrchat.com/worlds/udon/networking/network-components#networking-properties</docURL>
        <summary>
            returns true once all the data in the instance has been deserialized and applied, and
            it's ready for use.
        </summary>
    </member>
    <member name="P:VRC.SDKBase.Networking.IsClogged">
        <docURL>
            https://creators.vrchat.com/worlds/udon/networking/network-components#networking-properties</docURL>
        <summary>
            returns true if there is too much data trying to get out. You can use this to hold off
            some operations or adjust your logic.
        </summary>
    </member>
    <member name="P:VRC.SDKBase.Networking.IsInstanceOwner">
        <docURL>
            https://creators.vrchat.com/worlds/udon/networking/network-components#networking-properties</docURL>
        <cannyPosts>
            <cannyPost
                url="https://feedback.vrchat.com/bug-reports/p/networkingisinstanceowner-true-for-all-users">This
                property is currently broken, and will always return true! use <see
                    cref="P:VRC.SDKBase.VRCPlayerApi.isInstanceOwner" /> instead.</cannyPost>
        </cannyPosts>
        <summary>
            if the local Player is the one who created the instance.
        </summary>
        <remarks>
            Will be False when in Build &amp; Test and Unity Playmode.
        </remarks>
    </member>
    <member name="P:VRC.SDKBase.Networking.IsMaster">
        <docURL>
            https://creators.vrchat.com/worlds/udon/networking/network-components#networking-properties</docURL>
        <summary>
            Tells you whether the local Player is the instance master.
        </summary>
        <remarks> This is the player who either created the instance, or the one who inherited
            Master status when the last Master left.</remarks>
    </member>
    <member name="P:VRC.SDKBase.Networking.LocalPlayer">
        <docURL>
            https://creators.vrchat.com/worlds/udon/networking/network-components#networking-properties</docURL>
        <summary> returns the <see cref="T:VRC.SDKBase.VRCPlayerApi"></see> object of the local
            player. </summary>
        <remarks> Will be null in the editor, unless using a client emulator - use <see
                cref="M:VRC.SDKBase.VRCPlayerApi.IsValid"></see> to easily branch your logic on
            this.</remarks>
    </member>
    <member name="M:VRC.SDKBase.Networking.IsOwner(UnityEngine.GameObject)">
        <docURL>https://creators.vrchat.com/worlds/udon/players/#isowner</docURL>
        <summary>
            Tells you whether the local Player is the Owner of a given GameObject, important for
            Sync.
        </summary>
        <param name="obj">
            The GameObject to check ownership of.
        </param>
        <returns>
            True if the player is the owner of the GameObject, false if they are not.
        </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.IsOwner(VRC.SDKBase.VRCPlayerApi,UnityEngine.GameObject)">
        <docURL>https://creators.vrchat.com/worlds/udon/players/#isowner</docURL>
        <summary>
            Tells you whether a Player is the Owner of a given GameObject, important for Sync.
        </summary>
        <param name="player">
            The player to check ownership of.
        </param>
        <param name="obj">
            The GameObject to check ownership of.
        </param>
        <returns>
            True if the player is the owner of the GameObject, false if they are not.
        </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.GetOwner(UnityEngine.GameObject)">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary> Returns the <see cref="T:VRC.SDKBase.VRCPlayerApi"></see> object of the owner of a
            given GameObject. </summary>
        <param name="obj">
            The GameObject to check ownership of.
        </param>
        <returns> The <see cref="T:VRC.SDKBase.VRCPlayerApi"></see> object of the owner of the
            GameObject. </returns>
    </member>
    <member
        name="M:VRC.SDKBase.Networking.SetOwner(VRC.SDKBase.VRCPlayerApi,UnityEngine.GameObject)">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary>
            Sets the owner of a given GameObject to a given player.
        </summary>
        <param name="player">
            The player to set as the owner.
        </param>
        <param name="obj">
            The GameObject to check ownership of.
        </param>
    </member>
    <member name="M:VRC.SDKBase.Networking.GetNetworkDateTime">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary> Returns the current network time as a <see cref="T:System.DateTime"></see> object. </summary>
        <returns> The current network time as a <see cref="T:System.DateTime"></see> object. </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.GetServerTimeInSeconds">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary>
            Returns the current server time in seconds.
        </summary>
        <returns>
            The current server time in seconds.
        </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.GetServerTimeInMilliseconds">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary>
            Returns the current server time in milliseconds.
        </summary>
        <returns>
            The current server time in milliseconds.
        </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.CalculateServerDeltaTime(System.Double,System.Double)">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary> Calculates the difference between two server time stamps as returned by <see
                cref="M:VRC.SDKBase.Networking.GetServerTimeInSeconds"></see>. </summary>
        <param name="timeInSeconds">
            The first server time stamp.
        </param>
        <param name="previousTimeInSeconds">
            The second server time stamp.
        </param>
        <returns>
            The difference between the two server time stamps in seconds.
        </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.IsObjectReady(UnityEngine.GameObject)">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary>
            Returns whether a given GameObject is ready for use.
        </summary>
        <param name="obj">
            The GameObject to check.
        </param>
        <returns>
            True if the GameObject is ready for use, false if it is not.
        </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.GetUniqueName(UnityEngine.GameObject)">
        <docURL>https://udonsharp.docs.vrchat.com/vrchat-api/#methods-4</docURL>
        <summary>
            Returns a unique name for a given GameObject.
        </summary>
        <param name="obj">
            The GameObject to get the unique name of.
        </param>
        <returns> A unique name for the GameObject. This will be a integer (in string form) that is
            unique to that object. This is NOT the same as <see cref="M:string.GetHashCode"></see>
            on the name of the object. </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.SimulationTime(UnityEngine.GameObject)">
        <docURL>
            https://creators.vrchat.com/worlds/udon/networking/network-components/#networking-properties</docURL>
        <summary>
            returns the current simulation time of a object with networking components.
            Simulation time is a timestamp that refers to how far back in time an object is
            simulated.
        </summary>
        <remarks>
            This value is used internally for VRCObjectSync and players, but can be used
            in Udon scripts as well. For example, if your Time.realtimeSinceStartup is 45 and the
            SimulationTime of an object is 44.5, then VRChat believes 500ms of delay is necessary to
            smoothly replicate the object at that moment. You can use that number to learn some
            information about what VRCObjectSync is doing, or to create your own system similar to
            VRCObjectSync. For example, if you do Time.realTimeSinceStartup - SimulationTime(player)
            then that will tell you exactly how much latency that player has at that moment.
            Simulation time is frequently adjusted depending on network conditions, including many
            factors such as latency, reliability, and frequency of the packets being received. The
            goal of this adjustment is to be as close to real-time as possible to reduce latency,
            but to leave enough room to prevent hitching. There are a variety of factors that can
            cause hitching, but one example can be running out of received packets from the owner.
        </remarks>
        <param name="obj">
            The GameObject to get the simulation time of.
        </param>
        <returns> The current simulation time of the object. This MAY be <see
                cref="P:UnityEngine.Time.time"></see>
        </returns>
    </member>
    <member name="M:VRC.SDKBase.Networking.SimulationTime(VRC.SDKBase.VRCPlayerApi)">
        <docURL>
            https://creators.vrchat.com/worlds/udon/networking/network-components/#networking-properties</docURL>
        <summary>
            returns the current simulation time of a player.
            Simulation time is a timestamp that refers to how far back in time an object is
            simulated.
        </summary>
        <remarks>
            This value is used internally for VRCObjectSync and players, but can be used
            in Udon scripts as well. For example, if your Time.realtimeSinceStartup is 45 and the
            SimulationTime of an object is 44.5, then VRChat believes 500ms of delay is necessary to
            smoothly replicate the object at that moment. You can use that number to learn some
            information about what VRCObjectSync is doing, or to create your own system similar to
            VRCObjectSync. For example, if you do Time.realTimeSinceStartup - SimulationTime(player)
            then that will tell you exactly how much latency that player has at that moment.
            Simulation time is frequently adjusted depending on network conditions, including many
            factors such as latency, reliability, and frequency of the packets being received. The
            goal of this adjustment is to be as close to real-time as possible to reduce latency,
            but to leave enough room to prevent hitching. There are a variety of factors that can
            cause hitching, but one example can be running out of received packets from the owner.
        </remarks>
        <param name="target">
            The player to get the simulation time of.
        </param>
        <returns> The current simulation time of the object. This MAY be <see
                cref="P:UnityEngine.Time.time"></see>
        </returns>
    </member>
    <member name="T:VRC.SDKBase.Networking.SyncType">
        <docURL>https://creators.vrchat.com/worlds/udon/networking/#the-ways-you-can-sync</docURL>
        <summary>
            The different sync types available for entire U# objects. Setting this in code will
            remove
            the inspector header that allows you to set the sync type in-editor.
        </summary>
    </member>
    <member name="F:VRC.SDKBase.Networking.SyncType.Unknown">
        <docURL>https://creators.vrchat.com/worlds/udon/networking/#the-ways-you-can-sync</docURL>
        <summary>
            ??????
        </summary>
    </member>
    <member name="F:VRC.SDKBase.Networking.SyncType.None">
        <docURL>https://creators.vrchat.com/worlds/udon/networking/#the-ways-you-can-sync</docURL>
        <summary>
            No syncing will occur. This is the default behavior.
        </summary>
    </member>
    <member name="F:VRC.SDKBase.Networking.SyncType.Continuous">
        <docURL>https://creators.vrchat.com/worlds/udon/networking/#the-ways-you-can-sync</docURL>
        <summary>
            The object will be synced continuously, possibly multiple times per frame, and even if
            the synched data has not changed. This should be avoided at almost all costs, and it is
            almost always better to use a manual approach, only serializing when data is changed and
            when players join.
        </summary>
        <remarks>
            TODO: Clarify a direct example of how to avoid this sync type.
        </remarks>
    </member>
    <member name="F:VRC.SDKBase.Networking.SyncType.Manual">
        <docURL>https://creators.vrchat.com/worlds/udon/networking/#the-ways-you-can-sync</docURL>
        <summary>
            Allows you to manually trigger the sync/serialization of the object.
        </summary>
    </member>
</members>
